// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Marlborough76

//@version=5
// indicator("Imbalace Indicator", overlay=true)
strategy("Imbalace Strategy", overlay=true,
     initial_capital=1000000, 
    //  commission_type=strategy.commission.cash_per_contract, 
     commission_type=strategy.commission.cash_per_contract,
     commission_value=0.01,
     default_qty_type = strategy.percent_of_equity,
     default_qty_value = 0)

FromYear  = input.int(defval = 2020, title = "From Year", minval = 2000)
FromMonth = input.int(defval = 1, title = "From Month", minval = 1, maxval = 12)
Months    = input.int(defval = 36, title = "Months Ahead", minval = 1)
ToYear    = FromYear + int(Months / 12)              // input.int(defval = 9999, title = "To Year", minval = 2017)
ToMonth   = (Months + FromMonth) % 12                // input.int(defval = 1, title = "To Month", minval = 1, maxval = 12)
start     = timestamp(FromYear, FromMonth, 1, 0, 0)  // backtest start window
finish    = timestamp(ToYear, ToMonth, 1, 0, 0)      // backtest finish window
window() => 
    time >= start and time <= finish ? true : false // create function "within window of time"

/////////////////////////////////////
// Common code
sma_length=input.int(30, title="SMA Length")
percentile = input.int(defval = 97, title="Impulse Percentile", minval=0, maxval=99)
int score = input.int(4, title="Threshold", minval=1)

green50 = color.new(#44FF24, 60)
red50 = color.new(#FF4424, 50)

/////////////////////////////////////
// Volatility

get_barrier(observations, delta) =>
    n = timeframe.isminutes ? observations * 24 * 60 / timeframe.multiplier : 14
    float close_volatility = na
    float E = na
    float barrier = na
    int log_time = na
    float exit_time = 0
    float exit_happend = 0
    float _delta = delta //na(close_volatility[1]) or close_volatility[1] * 0.02 < delta ? delta : close_volatility[1] * 0.02
    
    // zeroing first element
    barrier := (na(barrier[1])) ? open : barrier[1]
    log_time := (na(log_time[1])) ? time : log_time[1]
    
    float weight = 0
    if ((high > barrier * (1 + _delta) ) or ((low < barrier * (1 - _delta))))
        weight := high > barrier * (1 + _delta) ? ((high - barrier) / barrier) / _delta : ((barrier - low) / barrier) / _delta
        barrier := high > barrier * (1 + _delta) ? high : low  //close
        exit_time := (time / 1000 - log_time) / weight
        log_time := time / 1000
        exit_happend := 1
    
    float d = math.sum(exit_happend, n)
    float exit_time_sum = math.sum(exit_time, n)
    
    E := d > 0 ? exit_time_sum / d : na
    
    if(timeframe.isintraday)
        if(timeframe.isminutes)
            E := E / (60 * timeframe.multiplier)
            close_volatility := _delta / math.sqrt(E) * math.sqrt(365 * 24 * 60 / timeframe.multiplier)
    else
        if (timeframe.isdaily)
            E := E / (60 * 60 * 24)
            close_volatility := _delta / math.sqrt(E) * math.sqrt(365)
        else
            E := na
            close_volatility := na


// Barrier method for volatility estimation
delta = input.float(0.02, minval=0.001, maxval = 0.999, step=0.001, title="_delta")
observations = input.int(14, minval=1, step=1, title="Number of observations (days)")

float close_volatility = 0
close_volatility := close_volatility + get_barrier(observations-1, 0.5 * delta)
close_volatility := close_volatility + get_barrier(observations, 0.6 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 0.7 * delta)
close_volatility := close_volatility + get_barrier(observations, 0.8 * delta)
close_volatility := close_volatility + get_barrier(observations-1, 0.9 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.0 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 1.1 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.2 * delta)
close_volatility := close_volatility + get_barrier(observations-1, 1.3 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.4 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 1.5 * delta)
close_volatility := close_volatility / 11

color_blank = color.new(color.white, 100)

ema_5 = ta.ema(close_volatility, 5)
ema_5_highest = ta.lowest(ema_5, 200)
ema_5_lowest =  ta.highest(ema_5, 200)

/////////////////////////////////
// Current trend colors

sma_close = ta.sma(close, sma_length)

/////////////////////////
// Volume
	
bar_size = math.abs(open - close)
bar_size_volume = bar_size * nz(volume, 1)
percentile_close = ta.percentile_nearest_rank(bar_size_volume, 200, percentile)
sma_volume = ta.sma(volume, sma_length)

/////////////////////////
// Variables

bool up_imbalance = na
bool down_imbalance = na
bool big_move_up = false
bool big_move_down = false
int up_imbalance_bar_index = na
int down_imbalance_bar_index = na
float up_imbalance_high = na
float up_imbalance_low = na
float down_imbalance_high = na
float down_imbalance_low = na
float up_imbalance_highest = na
float up_imbalance_lowest = na
float down_imbalance_highest = na
float down_imbalance_lowest = na
int lastX = na
float lastHY = na
float lastLY = na
float up_take_profit = na
float up_stop_limit = na
float down_take_profit = na
float down_stop_limit = na

up_imbalance_high := up_imbalance_high[1]
up_imbalance_low := up_imbalance_low[1]
up_imbalance_bar_index := up_imbalance_bar_index[1]
down_imbalance_high := down_imbalance_high[1]
down_imbalance_low := down_imbalance_low[1]
down_imbalance_bar_index := down_imbalance_bar_index [1]
lastX := lastX[1]
lastHY := lastHY[1]
lastLY := lastLY[1]
up_take_profit := up_take_profit[1]
up_stop_limit := up_stop_limit[1]
down_take_profit := down_take_profit[1]
down_stop_limit := down_stop_limit[1]

/////////////////////////////////
// Big move detection
if (na(volume) and bar_size > percentile_close) or (not na(volume) and bar_size_volume > percentile_close)
    if close > open
        big_move_up := true 
    else
        big_move_down := true

//////////////////////////////////
// Imbalance detection

top_imbalance = (low[2] <= open[1] and high[0] >= close[1]) or low[1] > high
top_imbalancesize = low[2] - high[0]
down_imbalance := top_imbalance and top_imbalancesize > 0
if down_imbalance
    red_box = box.new(left=bar_index[1], top=low[2], right=bar_index[0], bottom=high[0])
    box.set_bgcolor(red_box, red50)
    box.set_border_color (red_box, red50)
    down_imbalance_high := not na(up_imbalance_low) and up_imbalance_low < high[0] ? na : down_imbalance_high[1] ? down_imbalance_high[1] : low[2] 
    down_imbalance_low := not na(up_imbalance_low) and up_imbalance_low < high[0] ? na : high[0]
    down_imbalance_bar_index := bar_index
bottom_imbalance = (high[2] >= open[1] and low[0] <= close[1]) or high[1] < low
bottom_imbalancesize = low[0] - high[2]
up_imbalance := bottom_imbalance and bottom_imbalancesize > 0
if up_imbalance
    green_box = box.new(left=bar_index[1], top=low[0], right=bar_index[0], bottom=high[2])
    box.set_bgcolor(green_box, green50)
    box.set_border_color (green_box, green50)
    up_imbalance_high := not na(down_imbalance_high) and down_imbalance_high > low[0] ? na : low[0]
    up_imbalance_low := not na(down_imbalance_high) and down_imbalance_high > low[0] ? na : up_imbalance_low[1] ? up_imbalance_low[1] : high[2]
    up_imbalance_bar_index := bar_index
down_imbalance_high := high > down_imbalance_high or bar_index > down_imbalance_bar_index + sma_length ? na : down_imbalance_high
down_imbalance_low := na(down_imbalance_high) ? na : high > down_imbalance_low ? high : down_imbalance_low
up_imbalance_low := low < up_imbalance_low or bar_index > up_imbalance_bar_index + sma_length ? na : up_imbalance_low
up_imbalance_high := na(up_imbalance_low) ? na : low < up_imbalance_high ? low : up_imbalance_high

//////////////////////////
// Calculate KC

tr_range = math.max(high - low, math.abs(high - close[1]), math.abs(low - close[1]))
sma_range = ta.percentile_nearest_rank(tr_range, 100, 50) //ta.sma(tr_range, sma_length)
upperKC = sma_close + sma_range * 2
lowerKC = sma_close - sma_range * 2

///////////////////////////////////////////////////
// Consolidation zone
consolidation_length = sma_length //timeframe.isminutes ? observations * 24 * 60 / timeframe.multiplier : observations
candle_high = open > close ? (high + open) / 2 : (high + close) / 2
candle_low = open < close ? (low + open) / 2 : (low + close) / 2
candle_highest = ta.highest(candle_high, consolidation_length)
candle_lowest = ta.lowest(candle_low, consolidation_length)

if (candle_highest - candle_lowest > upperKC - lowerKC) and (na(candle_highest[1]) or na(candle_lowest[1]))
    candle_highest := na
    candle_lowest := na
if not na(candle_highest[1]) and not na(candle_highest)
    candle_highest := candle_highest[1]
    candle_lowest := candle_lowest[1]
if (high + close) / 2 > candle_highest or (low + close) / 2 < candle_lowest //or candle_highest < open or candle_lowest > open
    candle_highest := na
    candle_lowest := na
line line1 = na
line line2 = na
line line3 = na
line line4 = na
line line5 = na
if not na(candle_highest[1]) and na(candle_highest)
    if lastX < bar_index[consolidation_length]
        line1 := line.new(bar_index[consolidation_length], candle_highest[1], bar_index, candle_highest[1], color=color.new(color.blue,60))
        line3 := line.new(bar_index[consolidation_length], candle_lowest[1], bar_index, candle_lowest[1], color=color.new(color.blue,60))
        line5 := line.new(bar_index[consolidation_length], (candle_highest[1] + candle_lowest[1]) / 2, bar_index, (candle_highest[1] + candle_lowest[1]) / 2, color=color.new(color.blue,60))
    else
        line1 := line.new(lastX, candle_highest[1], bar_index, candle_highest[1], color=color.new(color.blue,60))
        line2 := line.new(lastX, candle_lowest[1], bar_index, candle_lowest[1], color=color.new(color.blue,60))
        line3 := line.new(lastX, lastHY, lastX, candle_highest[1], style=line.style_dotted, color=color.new(color.blue,60))
        line4 := line.new(lastX, lastLY, lastX, candle_lowest[1], style=line.style_dotted, color=color.new(color.blue,60))
        line5 := line.new(lastX, (candle_highest[1] + candle_lowest[1]) / 2, bar_index, (candle_highest[1] + candle_lowest[1]) / 2, color=color.new(color.blue,60))
    lastX := bar_index[1]
    lastHY := candle_highest[1]
    lastLY := candle_lowest[1]

///////////////////////////////////////

up_trend = up_imbalance_high - up_imbalance_low > 0
down_trend = down_imbalance_high - down_imbalance_low > 0
sma_color = color.gray
sma_color := up_trend ? color.green : sma_color
sma_color := down_trend ? color.red : sma_color

////////////////////////////////////////
// Alerts
int entry_bar_index = na
entry_bar_index := strategy.position_size == 0 ? 0 : entry_bar_index[1]

int alert = na
alert := strategy.position_size == 0 and strategy.position_size[1] != 0 and entry_bar_index[1] == 0 ? 0 : nz(alert[1])

if up_imbalance_high - up_imbalance_low > 0 and alert <= 0
    alert := 2
if not na(candle_highest[1]) and na(candle_highest) and (high+ close) / 2 > candle_highest[1]
    alert := alert + 2
if big_move_up
    alert := alert + 2
if up_imbalance
    alert := alert + 2
    
if down_imbalance_high - down_imbalance_low > 0 and alert >= 0
    alert :=  -2
if not na(candle_lowest[1]) and na(candle_lowest) and (low + close) / 2 < candle_lowest[1]
    alert := alert - 2
if big_move_down
    alert := alert - 2
if down_imbalance
    alert := alert - 2

alert_up = alert >= score and up_trend
alert_down = alert <= -score and down_trend

// string alert_msg = '{"blocks": [{"type": "section","text": {"type": "mrkdwn","text": "{{ticker}}: Exit of the consolidation"}}]}'
// alertcondition(alert >= score or alert <= -score, title='Consolidation Zone', message=alert_msg)
if strategy.position_size == 0
    if alert_up
        up_take_profit := close * (1 + close_volatility * 0.5)
        up_stop_limit := close * (1 - close_volatility * 0.1)
        down_take_profit := na
        down_stop_limit := na
        strategy.entry("L", direction=strategy.long)
        strategy.exit("SL", from_entry="L", stop=up_stop_limit, limit=up_take_profit)
        entry_bar_index := bar_index
    else if alert_down
        up_take_profit := na
        up_stop_limit := na
        down_take_profit := close * (1 - close_volatility * 0.5)
        down_stop_limit := close * (1 + close_volatility * 0.1)
        strategy.order("S", direction=strategy.short)
        strategy.exit("SS", from_entry="S", stop=down_stop_limit, limit=down_take_profit)
        entry_bar_index := bar_index
    else if strategy.position_size[1] != 0
        up_imbalance_high := na
        up_imbalance_low := na
        down_imbalance_high := na
        down_imbalance_low := na

if strategy.position_size > 0 and down_trend 
    strategy.close("L")
if strategy.position_size < 0 and up_trend
    strategy.close("S")
if strategy.position_size > 0 and bar_index - entry_bar_index > 240
    strategy.close("L")
    alert := 5
if strategy.position_size < 0 and bar_index - entry_bar_index > 120
    strategy.close("S")
    alert := 0
    
alert := alert >= 0 ? alert - 1 : alert
alert := alert <= 0 ? alert + 1 : alert

////////////////////////////////////////
// Plot functions

// plot(up_take_profit, style=plot.style_linebr)
// plot(up_stop_limit, style=plot.style_linebr)
// plot(down_take_profit, style=plot.style_linebr)
// plot(down_stop_limit, style=plot.style_linebr)
// plot(upperKC, style=plot.style_linebr)
// plot(lowerKC, style=plot.style_linebr)

plot(sma_close, color=sma_color, style=plot.style_linebr)

// plotshape(alert_up, style=shape.triangleup,location=location.abovebar, color=color.new(color.green, 50), size = size.tiny)
// plotshape(alert_down, style=shape.triangledown,location=location.belowbar, color=color.new(color.red, 50), size = size.tiny)

plot(candle_highest, color=color.blue, style=plot.style_linebr, linewidth=2)
plot((candle_highest + candle_lowest) / 2, color=color.new(color.blue,60), style=plot.style_linebr, linewidth=1)
plot(candle_lowest, color=color.blue, style=plot.style_linebr, linewidth=2)

plot_up_imbalance_high = plot(up_imbalance_high, color=color.new(color.green,75), style=plot.style_linebr, linewidth=1)
plot_up_imbalance_low = plot(up_imbalance_low, color=color.new(color.green,75), style=plot.style_linebr, linewidth=1)
fill(plot_up_imbalance_high, plot_up_imbalance_low, color=color.new(color.green, 90))
plot_down_imbalance_high = plot(down_imbalance_high, color=color.new(color.red,75), style=plot.style_linebr, linewidth=1)
plot_down_imbalance_low = plot(down_imbalance_low, color=color.new(color.red,75), style=plot.style_linebr, linewidth=1)
fill(plot_down_imbalance_high, plot_down_imbalance_low, color=color.new(color.red, 90))

plotshape(big_move_up, style=shape.cross,location=location.belowbar, color=color.new(color.yellow, 50), size = size.tiny)
plotshape(big_move_down, style=shape.cross,location=location.abovebar, color=color.new(color.yellow, 50), size = size.tiny)
