// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Marlborough76

//@version=5
indicator("Barrier Volatility Estimator", overlay=false, precision=6, max_bars_back=1500)

get_barrier(observations, delta) =>
    n = timeframe.isminutes ? observations * 24 * 60 / timeframe.multiplier : 14
    float close_volatility = na
    float E = na
    float barrier = na
    int log_time = na
    float exit_time = 0
    float exit_happend = 0
    float _delta = delta //na(close_volatility[1]) or close_volatility[1] * 0.02 < delta ? delta : close_volatility[1] * 0.02
    
    // zeroing first element
    barrier := (na(barrier[1])) ? open : barrier[1]
    log_time := (na(log_time[1])) ? time : log_time[1]
    
    float weight = 0
    if ((high > barrier * (1 + _delta) ) or ((low < barrier * (1 - _delta))))
        weight := high > barrier * (1 + _delta) ? ((high - barrier) / barrier) / _delta : ((barrier - low) / barrier) / _delta
        barrier := high > barrier * (1 + _delta) ? high : low  //close
        exit_time := (time / 1000 - log_time) / weight
        log_time := time / 1000
        exit_happend := 1
    
    float d = math.sum(exit_happend, n)
    float exit_time_sum = math.sum(exit_time, n)
    
    E := d > 0 ? exit_time_sum / d : na
    
    if(timeframe.isintraday)
        if(timeframe.isminutes)
            E := E / (60 * timeframe.multiplier)
            close_volatility := _delta / math.sqrt(E) * math.sqrt(365 * 24 * 60 / timeframe.multiplier)
    else
        if (timeframe.isdaily)
            E := E / (60 * 60 * 24)
            close_volatility := _delta / math.sqrt(E) * math.sqrt(365)
        else
            E := na
            close_volatility := na


// Barrier method for volatility estimation
delta = input.float(0.02, minval=0.001, maxval = 0.999, step=0.001, title="_delta")
observations = input.int(14, minval=1, step=1, title="Number of observations (days)")

float close_volatility = 0
close_volatility := close_volatility + get_barrier(observations-1, 0.5 * delta)
close_volatility := close_volatility + get_barrier(observations, 0.6 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 0.7 * delta)
close_volatility := close_volatility + get_barrier(observations, 0.8 * delta)
close_volatility := close_volatility + get_barrier(observations-1, 0.9 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.0 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 1.1 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.2 * delta)
close_volatility := close_volatility + get_barrier(observations-1, 1.3 * delta)
close_volatility := close_volatility + get_barrier(observations, 1.4 * delta)
close_volatility := close_volatility + get_barrier(observations+1, 1.5 * delta)
close_volatility := close_volatility / 11

color_blank = color.new(color.white, 100)

ema_5 = ta.ema(close_volatility, 5)
ema_5_highest = ta.lowest(ema_5, 200)
ema_5_lowest =  ta.highest(ema_5, 200)
col_up = ema_5 == ema_5_highest ? color.green : ema_5 == ema_5_lowest ? color.red : color.gray
plot(close_volatility, color=col_up)

